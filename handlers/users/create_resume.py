import os
from datetime import datetime

from aiogram import types
from aiogram.dispatcher import FSMContext
from keyboards.default.agreement import agreement_default_keyboard_uzb, agreement_default_keyboard_rus
from keyboards.default.branches import branch_keyboard_uzb, branch_keyboard_rus
from keyboards.default.categories import category_keyboard_uzb, category_keyboard_rus
from keyboards.default.computer_level import computer_level_default_keyboard_uzb, computer_level_default_keyboard_rus
from keyboards.default.education_form import education_form_default_keyboard_uzb, education_form_default_keyboard_rus
from keyboards.default.education_level import education_level_default_keyboard_uzb, education_level_default_keyboard_rus
from keyboards.default.expected_salary import expected_salary_default_keyboard_uzb, expected_salary_default_keyboard_rus
from keyboards.default.gender import gender_default_keyboard_uzb, gender_default_keyboard_rus
from keyboards.default.main_menu import back_or_main_default_keyboard_uzb, back_or_main_default_keyboard_rus, \
    main_menu_default_keyboard_rus, main_menu_default_keyboard_uzb
from keyboards.default.marital_status import marital_status_default_keyboard_rus, marital_status_default_keyboard_uzb
from keyboards.default.regions import region_keyboard_uzb, region_keyboard_rus
from keyboards.default.send import send_default_keyboard_uzb, send_default_keyboard_rus
from keyboards.default.source_about_vacancy import source_about_vacancy_default_keyboard_uzb, \
    source_about_vacancy_default_keyboard_rus
from keyboards.default.uzb_language_level import language_level_default_keyboard_uzb, \
    language_level_default_keyboard_rus
from keyboards.default.vacancies import vacancy_keyboard_uzb, vacancy_keyboard_rus
from keyboards.default.yes_no import yes_no_default_keyboard_uzb, yes_no_default_keyboard_rus
from loader import dp, db, bot
from states.resume import ResumeState
from utils.data_validator import validate_date, validate_phone_number, validate_email

PHOTO_DIR = 'media/photos'
if not os.path.exists(PHOTO_DIR):
    os.makedirs(PHOTO_DIR)


@dp.message_handler(text=["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], state=ResumeState.category)
@dp.message_handler(text=["üíºBo'sh ish o'rinlari", "üíº –í–∞–∫–∞–Ω—Å–∏–∏"], state="*")
async def vacancies(message: types.Message, state: FSMContext):
    try:
        await state.finish()
    except:
        pass
    user_telegram_id = message.from_user.id
    users = await db.select_users(telegram_id=user_telegram_id)

    if not users:
        full_name = message.from_user.full_name
        username = message.from_user.username
        user = await db.create_user(
            username=username,
            full_name=full_name,
            telegram_id=user_telegram_id
        )
        role = user['role']
        language = user['language']
        user_id = user['id']
    else:
        language = users[0]['language']
        user_id = users[0]['id']
    if language == 'uzb':
        text1 = "Keling, rezyumeni yaratishni boshlaylik"
        text2 = "Hududni tanlang."
        markup = await region_keyboard_uzb()
    else:
        text1 = "–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –í–∞—à–µ–≥–æ —Ä–µ–∑—é–º–µ"
        text2 = "–í—ã–±–µ—Ä–∏—Ç–µ –†–µ–≥–∏–æ–Ω."
        markup = await region_keyboard_rus()

    await message.answer(text=text1)
    await message.answer(text=text2, reply_markup=markup)
    await ResumeState.region.set()
    await state.update_data(language=language, user_id=user_id)


@dp.message_handler(text=["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], state=ResumeState.branch)
@dp.message_handler(state=ResumeState.region)
async def get_region(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get('language')
    region = message.text
    if region not in ["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:
        regions = await db.select_region(name_uzb=region) if language == 'uzb' else await db.select_region(
            name_rus=region)
        if not regions:
            if language == 'uzb':
                text1 = "Noto'g'ri ma'lumot kiritildi"
                text2 = "Hududni tanlang."
                markup = await region_keyboard_uzb()
            else:
                text1 = "–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
                text2 = "–í—ã–±–µ—Ä–∏—Ç–µ –†–µ–≥–∏–æ–Ω."
                markup = await region_keyboard_rus()
            await message.answer(text=text1)
            await message.answer(text=text2, reply_markup=markup)
            return
        region_id = regions[0]['id']
        await state.update_data(region=region_id)
    else:
        region_id = data.get('region')

    text = "Ish yo'nalishini tanlang." if language == 'uzb' else "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ."
    markup = await category_keyboard_uzb(region_id=region_id) if language == 'uzb' else await category_keyboard_rus(
        region_id=region_id)
    await ResumeState.category.set()
    await message.answer(text=text, reply_markup=markup)


@dp.message_handler(text=["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], state=ResumeState.vacancy)
@dp.message_handler(state=ResumeState.category)
async def get_category(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get('language')
    region_id = data.get('region')
    category = message.text
    if category not in ["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:

        categories = await db.select_category(title_uzb=category) if language == 'uzb' else await db.select_category(
            title_rus=category)
        if not categories:
            if language == 'uzb':
                text1 = "Noto'g'ri ma'lumot kiritildi"
                text2 = "Ish yo'nalishini tanlang."
                markup = await category_keyboard_uzb(region_id=region_id)
            else:
                text1 = "–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
                text2 = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ."
                markup = await category_keyboard_rus(region_id=region_id)
            await message.answer(text=text1)
            await message.answer(text=text2, reply_markup=markup)
            return
        category_id = categories[0]['id']
        await state.update_data(category=category_id)
    else:
        category_id = data.get('category')

    text = "üìç Filialni tanlang" if language == 'uzb' else "üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª"
    markup = await branch_keyboard_uzb(region_id=region_id,
                                       category_id=category_id) if language == 'uzb' \
        else await branch_keyboard_rus(
        category_id=category_id,
        region_id=region_id)
    await ResumeState.branch.set()
    await message.answer(text=text, reply_markup=markup)


@dp.message_handler(text=["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], state=ResumeState.first_name)
@dp.message_handler(state=ResumeState.branch)
async def get_branch(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get('language')
    region_id = data.get('region')
    category_id = data.get('category')
    branch = message.text

    if branch not in ["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:

        branches = await db.select_branch(title_uzb=branch) if language == 'uzb' else await db.select_branch(
            title_rus=branch)
        if not branches:
            if language == 'uzb':
                text1 = "Noto'g'ri ma'lumot kiritildi"
                text2 = "üìç Filialni tanlang."
                markup = await branch_keyboard_uzb(region_id=region_id,
                                                   category_id=category_id)
            else:
                text1 = "–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
                text2 = "üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª."
                markup = await branch_keyboard_rus(region_id=region_id,
                                                   category_id=category_id)
            await message.answer(text=text1)
            await message.answer(text=text2, reply_markup=markup)
            return
        branch_id = branches[0]['id']
        await state.update_data(branch=branch_id)
    else:
        branch_id = data.get('branch')
    branches = await db.select_branch(id=branch_id)

    text = f"{branches[0]['description_uzb']}" if language == 'uzb' else f"{branches[0]['description_rus']}"
    await message.answer(text=text)
    await message.answer_location(latitude=float(branches[0]['latitude']), longitude=float(branches[0]['longitude']))

    text = "üíº Sizni qiziqtirgan vakansiyani tanlang" if language == 'uzb' else "üíº –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å –≤–∞–∫–∞–Ω—Å–∏—é"
    markup = await vacancy_keyboard_uzb(region_id=region_id,
                                        category_id=category_id,
                                        branch_id=branch_id) if language == 'uzb' \
        else await vacancy_keyboard_rus(
        category_id=category_id,
        region_id=region_id,
        branch_id=branch_id)
    await ResumeState.vacancy.set()
    await message.answer(text=text, reply_markup=markup)


@dp.message_handler(text=["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], state=ResumeState.last_name)
@dp.message_handler(state=ResumeState.vacancy)
async def get_vacancy(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get('language')
    region_id = data.get('region')
    category_id = data.get('category')
    branch_id = data.get('branch')
    vacancy = message.text

    if vacancy not in ["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:

        vacancies = await db.select_vacancy(title_uzb=vacancy) if language == 'uzb' else await db.select_vacancy(
            title_rus=vacancy)
        if not vacancies:
            if language == 'uzb':
                text1 = "Noto'g'ri ma'lumot kiritildi"
                text2 = "üíº Sizni qiziqtirgan vakansiyani tanlang"
                markup = await vacancy_keyboard_uzb(region_id=region_id,
                                                    category_id=category_id,
                                                    branch_id=branch_id)
            else:
                text1 = "–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
                text2 = "üíº –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å –≤–∞–∫–∞–Ω—Å–∏—é"
                markup = await vacancy_keyboard_rus(region_id=region_id,
                                                    category_id=category_id,
                                                    branch_id=branch_id)
            await message.answer(text=text1)
            await message.answer(text=text2, reply_markup=markup)
            return
        vacancy_id = vacancies[0]['id']
        await state.update_data(vacancy=vacancy_id)
    else:
        vacancy_id = data.get('vacancy')
    if message.text not in ["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:
        vacancies = await db.select_vacancy(id=vacancy_id)
        vacancy = vacancies[0]

        text = f"{vacancy['description_uzb']}" if language == 'uzb' else f"{vacancy['description_rus']}"
        if vacancy['photo']:
            photo_path = vacancy['photo']
            photo_path = "media/" + photo_path
            if os.path.isfile(photo_path):
                with open(photo_path, 'rb') as photo_file:
                    await message.answer_photo(photo=photo_file, caption=text)
        else:
            await message.answer(text=text)
    if language == 'uzb':
        text = ("üë§ Passport bo'yicha ismingizni kiriting\n"
                "(Misol uchun: Baxodir)")
        markup = back_or_main_default_keyboard_uzb
    else:
        text = ("üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ –ø–∞—Å–ø–æ—Ä—Ç—É\n"
                "(–ø—Ä–∏–º–µ—Ä:  Baxodir)")
        markup = back_or_main_default_keyboard_rus
    await message.answer(text=text, reply_markup=markup)
    await ResumeState.first_name.set()


@dp.message_handler(text=["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], state=ResumeState.fathers_name)
@dp.message_handler(state=ResumeState.first_name)
async def get_first_name(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get('language')
    first_name = message.text
    if first_name not in ["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:
        await state.update_data(first_name=first_name)
    if language == 'uzb':
        text = ("üë§ Pasportingiz bo'yicha familiyangizni kiriting\n"
                "(masalan: Baxodirov)")
        markup = back_or_main_default_keyboard_uzb
    else:
        text = ("üë§ –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—è –ø–æ –ø–∞—Å–ø–æ—Ä—Ç—É\n"
                "(–ø—Ä–∏–º–µ—Ä:  Baxodirov)")
        markup = back_or_main_default_keyboard_rus
    await message.answer(text=text, reply_markup=markup)
    await ResumeState.last_name.set()


@dp.message_handler(text=["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], state=ResumeState.gender)
@dp.message_handler(state=ResumeState.last_name)
async def get_last_name(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get('language')
    last_name = message.text
    if last_name not in ["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:
        await state.update_data(last_name=last_name)
    if language == 'uzb':
        text = ("üë§ Pasportingizdagi otangiz ismini kiriting\n"
                "(misol: Abdurashidovich)")
        markup = back_or_main_default_keyboard_uzb
    else:
        text = ("üë§ –í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ –ø–æ –ø–∞—Å–ø–æ—Ä—Ç—É\n"
                "(–ø—Ä–∏–º–µ—Ä:  Abdurashidovich)")
        markup = back_or_main_default_keyboard_rus
    await message.answer(text=text, reply_markup=markup)
    await ResumeState.fathers_name.set()


@dp.message_handler(text=["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], state=ResumeState.date_of_birth)
@dp.message_handler(state=ResumeState.fathers_name)
async def get_fathers_name(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get('language')
    fathers_name = message.text
    if fathers_name not in ["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:
        await state.update_data(fathers_name=fathers_name)
    if language == 'uzb':
        text = "üë®‚Äçüíº/üë©‚Äçü¶∞ Jinsingizni tanlang"
        markup = gender_default_keyboard_uzb
    else:
        text = "üë®‚Äçüíº/üë©‚Äçü¶∞ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª"
        markup = gender_default_keyboard_rus
    await message.answer(text=text, reply_markup=markup)
    await ResumeState.gender.set()


@dp.message_handler(text=["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], state=ResumeState.location)
@dp.message_handler(state=ResumeState.gender)
async def get_gender(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get('language')
    gender = message.text
    if gender not in ["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:
        if gender in ["üë© Ayol", "üë© –ñ–µ–Ω—â–∏–Ω–∞", "üë® Erkak", "üë® –ú—É–∂—á–∏–Ω–∞"]:
            gender = gender
        else:
            text1 = "Noto'g'ri ma'lumot kiritildi" if language == 'uzb' else "–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
            text2 = "‚Äçüë®‚Äçüíº/üë©‚Äçü¶∞ Jinsingizni tanlang" if language == 'uzb' else "üë®‚Äçüíº/üë©‚Äçü¶∞ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª"
            markup = gender_default_keyboard_uzb if language == 'uzb' else gender_default_keyboard_rus
            await message.answer(text=text1)
            await message.answer(text=text2, reply_markup=markup)
            return
        await state.update_data(gender=gender)
    if language == 'uzb':
        text = "üìÖ Tug'ilgan kuningizni kiriting (masalan, dd.mm.yyyy):"
        markup = back_or_main_default_keyboard_uzb
    else:
        text = "üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä, –¥–¥.–º–º.–≥–≥–≥–≥):"
        markup = back_or_main_default_keyboard_rus
    await message.answer(text=text, reply_markup=markup)
    await ResumeState.date_of_birth.set()


@dp.message_handler(text=["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], state=ResumeState.phone)
@dp.message_handler(state=ResumeState.date_of_birth)
async def get_date_of_birth(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get('language')
    date_of_birth = message.text
    if date_of_birth not in ["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:
        if await validate_date(date_of_birth):
            await state.update_data(date_of_birth=date_of_birth)
        else:
            text1 = "‚ùåTo'g'ri ma'lumotlarni kiriting.‚ùå" if language == "uzb" else "‚ùå–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.‚ùå"
            text2 = "üìÖ Tug'ilgan kuningizni kiriting (masalan, dd.mm.yyyy):" if language == "uzb" else "üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä, –¥–¥.–º–º.–≥–≥–≥–≥):"
            markup = back_or_main_default_keyboard_uzb if language == "uzb" else back_or_main_default_keyboard_rus
            await message.answer(text=text1)
            await message.answer(text=text2, reply_markup=markup)
            return
    if language == 'uzb':
        text = "üè† Yashash manzil (shahar, tuman, ko'cha/blok)"
        markup = back_or_main_default_keyboard_uzb
    else:
        text = "üè† –ê–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è (–≥–æ—Ä–æ–¥, —Ä–∞–π–æ–Ω, —É–ª–∏—Ü–∞/–∫–≤–∞—Ä—Ç–∞–ª)"
        markup = back_or_main_default_keyboard_rus
    await message.answer(text=text, reply_markup=markup)
    await ResumeState.location.set()


@dp.message_handler(text=["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], state=ResumeState.email)
@dp.message_handler(state=ResumeState.location)
async def get_location(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get('language')
    location = message.text
    if location not in ["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:
        await state.update_data(location=location)
    if language == 'uzb':
        text = "üì± Telefon raqamingizni kiriting (masalan: +998XXXXXXXXX):"
        markup = back_or_main_default_keyboard_uzb
    else:
        text = "üì± –£–∫–∞–∂–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø—Ä–∏–º–µ—Ä: +998XXXXXXXXX):"
        markup = back_or_main_default_keyboard_rus
    await message.answer(text=text, reply_markup=markup)
    await ResumeState.phone.set()


@dp.message_handler(text=["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], state=ResumeState.username)
@dp.message_handler(state=ResumeState.phone)
async def get_phone(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get('language')
    phone = message.text
    if phone not in ["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:
        if await validate_phone_number(phone):
            await state.update_data(phone=phone)
        else:
            text1 = "‚ùåTo'g'ri ma'lumotlarni kiriting.‚ùå" if language == "uzb" else "‚ùå–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.‚ùå"
            text2 = "üì± Telefon raqamingizni kiriting (masalan: +998XXXXXXXXX):" if language == "uzb" else "üì± –£–∫–∞–∂–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø—Ä–∏–º–µ—Ä: +998XXXXXXXXX):"
            markup = back_or_main_default_keyboard_uzb if language == "uzb" else back_or_main_default_keyboard_rus
            await message.answer(text=text1)
            await message.answer(text=text2, reply_markup=markup)
            return
    if language == 'uzb':
        text = "üì• Elektron pochta manzilingizni kiriting (google@gmail.com)"
        markup = back_or_main_default_keyboard_uzb
    else:
        text = "üì• –í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É (google@gmail.com)"
        markup = back_or_main_default_keyboard_rus
    await message.answer(text=text, reply_markup=markup)
    await ResumeState.email.set()


@dp.message_handler(text=["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], state=ResumeState.marital_status)
@dp.message_handler(state=ResumeState.email)
async def get_email(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get('language')
    email = message.text
    if email not in ["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:
        if await validate_email(email):
            await state.update_data(email=email)
        else:
            text1 = "‚ùåTo'g'ri ma'lumotlarni kiriting.‚ùå" if language == "uzb" else "‚ùå–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.‚ùå"
            text2 = "üì• Elektron pochta manzilingizni kiriting (google@gmail.com)" if language == "uzb" else "üì• –í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É (google@gmail.com)"
            markup = back_or_main_default_keyboard_uzb if language == "uzb" else back_or_main_default_keyboard_rus
            await message.answer(text=text1)
            await message.answer(text=text2, reply_markup=markup)
            return
    if language == 'uzb':
        text = "‚úèÔ∏è Telegramda username kiriting (@username)"
        markup = back_or_main_default_keyboard_uzb
    else:
        text = "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ username –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ (@username)"
        markup = back_or_main_default_keyboard_rus
    await message.answer(text=text, reply_markup=markup)
    await ResumeState.username.set()


@dp.message_handler(text=["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], state=ResumeState.is_student)
@dp.message_handler(state=ResumeState.username)
async def get_username(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get('language')
    username = message.text
    if username not in ["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:
        await state.update_data(username=username)
    if language == 'uzb':
        text = "üíç Oilaviy ahvolingiz:"
        markup = marital_status_default_keyboard_uzb
    else:
        text = "üíç –í–∞—à–µ —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ:"
        markup = marital_status_default_keyboard_rus
    await message.answer(text=text, reply_markup=markup)
    await ResumeState.marital_status.set()


@dp.message_handler(text=["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], state=ResumeState.education_form)
@dp.message_handler(state=ResumeState.marital_status)
async def get_marital_status(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get('language')
    marital_status = message.text
    if marital_status not in ["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:
        if marital_status in ["Uylangan/erga tekkan", "–ñ–µ–Ω–∞—Ç/–∑–∞–º—É–∂–µ–º", "Uylanmagan/erga tegmagan",
                              "–ù–µ –∂–µ–Ω–∞—Ç/–Ω–µ –∑–∞–º—É–∂–µ–º", "Ajrashgan", "–†–∞–∑–≤–µ–¥–µ–Ω/–†–∞–∑–≤–µ–¥–µ–Ω–∞", "Beva",
                              "–í–¥–æ–≤–µ—Ü/–í–¥–æ–≤–∞"]:
            marital_status = marital_status
        else:
            text1 = "Noto'g'ri ma'lumot kiritildi" if language == 'uzb' else "–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
            text2 = "‚Äçüíç Oilaviy ahvolingiz:" if language == 'uzb' else "üíç –í–∞—à–µ —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ:"
            markup = marital_status_default_keyboard_uzb if language == 'uzb' else marital_status_default_keyboard_rus
            await message.answer(text=text1)
            await message.answer(text=text2, reply_markup=markup)
            return
        await state.update_data(marital_status=marital_status)
    if language == 'uzb':
        text = "üë®‚Äçüéì Siz hozir talabasizmi?"
        markup = yes_no_default_keyboard_uzb
    else:
        text = "üë®‚Äçüéì –Ø–≤–ª—è–µ—Ç–µ—Å—å –ª–∏ –≤—ã —É—á–µ–Ω–∏–∫–æ–º , —Å—Ç—É–¥–µ–Ω—Ç–æ–º –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è?"
        markup = yes_no_default_keyboard_rus
    await message.answer(text=text, reply_markup=markup)
    await ResumeState.is_student.set()


@dp.message_handler(text=["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], state=ResumeState.education_level)
@dp.message_handler(state=ResumeState.is_student)
async def get_marital_is_student(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get('language')
    is_student = message.text
    if is_student not in ["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:
        if is_student in ["Ha", "–î–∞", "Yo'q", "–ù–µ—Ç"]:
            is_student = is_student

        else:
            text1 = "Noto'g'ri ma'lumot kiritildi" if language == 'uzb' else "–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
            text2 = "üë®‚Äçüéì Siz hozir talabasizmi?" if language == 'uzb' else "üë®‚Äçüéì –Ø–≤–ª—è–µ—Ç–µ—Å—å –ª–∏ –≤—ã —É—á–µ–Ω–∏–∫–æ–º , —Å—Ç—É–¥–µ–Ω—Ç–æ–º –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è?"
            markup = yes_no_default_keyboard_uzb if language == 'uzb' else yes_no_default_keyboard_rus
            await message.answer(text=text1)
            await message.answer(text=text2, reply_markup=markup)
            return
        await state.update_data(is_student=is_student)
        next_state = True
    else:
        is_student = data.get('is_student')
        next_state = False
    if is_student in ["Ha", "–î–∞"]:
        if language == 'uzb':
            text = "üìö Ta'lim shaklini tanlang"
            markup = education_form_default_keyboard_uzb
        else:
            text = "üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è"
            markup = education_form_default_keyboard_rus
        await message.answer(text=text, reply_markup=markup)
        await ResumeState.education_form.set()
    else:
        if next_state:
            if language == 'uzb':
                text = "üåê Ta'lim darajangiz qanday?"
                markup = education_level_default_keyboard_uzb
            else:
                text = "üåê –ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è?"
                markup = education_level_default_keyboard_rus
            await message.answer(text=text, reply_markup=markup)
            await ResumeState.education_level.set()
        else:
            if language == 'uzb':
                text = "üë®‚Äçüéì Siz hozir talabasizmi?"
                markup = yes_no_default_keyboard_uzb
            else:
                text = "üë®‚Äçüéì –Ø–≤–ª—è–µ—Ç–µ—Å—å –ª–∏ –≤—ã —É—á–µ–Ω–∏–∫–æ–º , —Å—Ç—É–¥–µ–Ω—Ç–æ–º –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è?"
                markup = yes_no_default_keyboard_rus
            await message.answer(text=text, reply_markup=markup)
            await ResumeState.is_student.set()


@dp.message_handler(text=["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], state=ResumeState.uzb_language_level)
@dp.message_handler(state=ResumeState.education_form)
async def get_education_form(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get('language')
    education_form = message.text
    if education_form not in ["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:
        if education_form in ["Kunduzgi", "–û—á–Ω–æ–µ", "Sirtqi", "–ó–∞–æ—á–Ω–æ–µ", "Kechki",
                              "–í–µ—á–µ—Ä–Ω–µ–µ", "Masofaviy", "–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–µ"]:
            education_form = education_form
        else:
            text1 = "Noto'g'ri ma'lumot kiritildi" if language == 'uzb' else "–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
            text2 = "‚Äçüìö Ta'lim shaklini tanlang" if language == 'uzb' else "üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è"
            markup = education_form_default_keyboard_uzb if language == 'uzb' else education_form_default_keyboard_rus
            await message.answer(text=text1)
            await message.answer(text=text2, reply_markup=markup)
            return
        await state.update_data(education_form=education_form)
    if language == 'uzb':
        text = "üåê Ta'lim darajangiz qanday?"
        markup = education_level_default_keyboard_uzb
    else:
        text = "üåê –ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è?"
        markup = education_level_default_keyboard_rus
    await message.answer(text=text, reply_markup=markup)
    await ResumeState.education_level.set()


@dp.message_handler(text=["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], state=ResumeState.rus_language_level)
@dp.message_handler(state=ResumeState.education_level)
async def get_education_level(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get('language')
    education_level = message.text
    if education_level not in ["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:
        if education_level in ["O'rta", "–°—Ä–µ–¥–Ω–µ–µ", "O'rta maxsus", "–°—Ä–µ–¥–Ω–µ–µ-—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ", "Oliy",
                               "–í—ã—Å—à–µ–µ"]:
            education_level = education_level
        else:
            text1 = "Noto'g'ri ma'lumot kiritildi" if language == 'uzb' else "–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
            text2 = "‚Äçüåê Ta'lim darajangiz qanday?" if language == 'uzb' else "üåê –ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è?"
            markup = education_level_default_keyboard_uzb if language == 'uzb' else education_level_default_keyboard_rus
            await message.answer(text=text1)
            await message.answer(text=text2, reply_markup=markup)
            return
        await state.update_data(education_level=education_level)
    if language == 'uzb':
        text = "üá∫üáø O'zbek tilini bilish darajangiz qanday?"
        markup = language_level_default_keyboard_uzb
    else:
        text = "üá∫üáø –ö–∞–∫–æ–π —É –í–∞—Å —É—Ä–æ–≤–µ–Ω—å —É–∑–±–µ–∫—Å–∫–æ–≥–æ —è–∑—ã–∫–∞?"
        markup = language_level_default_keyboard_rus
    await message.answer(text=text, reply_markup=markup)
    await ResumeState.uzb_language_level.set()


@dp.message_handler(text=["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], state=ResumeState.computer_level)
@dp.message_handler(state=ResumeState.uzb_language_level)
async def get_uzb_language_level(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get('language')
    uzb_language_level = message.text
    if uzb_language_level not in ["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:
        if uzb_language_level in ["Past(tushunmayman va gapirmayman)",
                                  "–ù–∏–∑–∫–∏–π (–Ω–µ –ø–æ–Ω–∏–º–∞—é –∏ –Ω–µ –≥–æ–≤–æ—Ä—é)",
                                  "O'rta(tushunaman, lekin yomon gapiraman)",
                                  "–°—Ä–µ–¥–Ω–∏–π (–ø–æ–Ω–∏–º–∞—é, –Ω–æ –ø–ª–æ—Ö–æ –≥–æ–≤–æ—Ä—é)",
                                  "Ilg'or(men ravon gapiraman va tushunaman)",
                                  "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (—Å–≤–æ–±–æ–¥–Ω–æ –≥–æ–≤–æ—Ä—é –∏ –ø–æ–Ω–∏–º–∞—é)",
                                  ]:
            uzb_language_level = uzb_language_level
        else:
            text1 = "Noto'g'ri ma'lumot kiritildi" if language == 'uzb' else "–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
            text2 = "‚Äçüá∫üáø O'zbek tilini bilish darajangiz qanday?" if language == 'uzb' else "üá∫üáø –ö–∞–∫–æ–π —É –í–∞—Å —É—Ä–æ–≤–µ–Ω—å —É–∑–±–µ–∫—Å–∫–æ–≥–æ —è–∑—ã–∫–∞?"
            markup = language_level_default_keyboard_uzb if language == 'uzb' else language_level_default_keyboard_rus
            await message.answer(text=text1)
            await message.answer(text=text2, reply_markup=markup)
            return
        await state.update_data(uzb_language_level=uzb_language_level)
    if language == 'uzb':
        text = "üá∑üá∫ Rus tilini bilish darajangiz qanday?"
        markup = language_level_default_keyboard_uzb
    else:
        text = "üá∑üá∫ –ö–∞–∫–æ–π —É –í–∞—Å —É—Ä–æ–≤–µ–Ω—å —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞?"
        markup = language_level_default_keyboard_rus
    await message.answer(text=text, reply_markup=markup)
    await ResumeState.rus_language_level.set()


@dp.message_handler(text=["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], state=ResumeState.expected_salary)
@dp.message_handler(state=ResumeState.rus_language_level)
async def get_rus_language_level(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get('language')
    rus_language_level = message.text
    if rus_language_level not in ["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:
        if rus_language_level in ["Past(tushunmayman va gapirmayman)",
                                  "–ù–∏–∑–∫–∏–π (–Ω–µ –ø–æ–Ω–∏–º–∞—é –∏ –Ω–µ –≥–æ–≤–æ—Ä—é)",
                                  "O'rta(tushunaman, lekin yomon gapiraman)",
                                  "–°—Ä–µ–¥–Ω–∏–π (–ø–æ–Ω–∏–º–∞—é, –Ω–æ –ø–ª–æ—Ö–æ –≥–æ–≤–æ—Ä—é)",
                                  "Ilg'or(men ravon gapiraman va tushunaman)",
                                  "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (—Å–≤–æ–±–æ–¥–Ω–æ –≥–æ–≤–æ—Ä—é –∏ –ø–æ–Ω–∏–º–∞—é)",
                                  ]:
            rus_language_level = rus_language_level
        else:
            text1 = "Noto'g'ri ma'lumot kiritildi" if language == 'uzb' else "–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
            text2 = "‚Äçüá∑üá∫ Rus tilini bilish darajangiz qanday?" if language == 'uzb' else "üá∑üá∫ –ö–∞–∫–æ–π —É –í–∞—Å —É—Ä–æ–≤–µ–Ω—å —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞?"
            markup = language_level_default_keyboard_uzb if language == 'uzb' else language_level_default_keyboard_rus
            await message.answer(text=text1)
            await message.answer(text=text2, reply_markup=markup)
            return
        await state.update_data(rus_language_level=rus_language_level)
    if language == 'uzb':
        text = "üñ• Kompyuterni qanday darajada bilasiz?"
        markup = computer_level_default_keyboard_uzb
    else:
        text = "üñ• –ö–∞–∫–æ–π —É –í–∞—Å —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º?"
        markup = computer_level_default_keyboard_rus
    await message.answer(text=text, reply_markup=markup)
    await ResumeState.computer_level.set()


@dp.message_handler(text=["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], state=ResumeState.photo)
@dp.message_handler(state=ResumeState.computer_level)
async def get_computer_level(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get('language')
    computer_level = message.text
    if computer_level not in ["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:
        if computer_level in ["Bilmayman",
                              "–ù–µ –≤–ª–∞–¥–µ—é", "O'rtacha daraja",
                              "–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å", "Foydalanuvchi",
                              "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "Mutaxasis",
                              "–≠–∫—Å–ø–µ—Ä—Ç"]:
            computer_level = computer_level
        else:
            text1 = "Noto'g'ri ma'lumot kiritildi" if language == 'uzb' else "–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
            text2 = "üñ• Kompyuterni qanday darajada bilasiz?" if language == 'uzb' else "üñ• –ö–∞–∫–æ–π —É –í–∞—Å —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º?"
            markup = language_level_default_keyboard_uzb if language == 'uzb' else language_level_default_keyboard_rus
            await message.answer(text=text1)
            await message.answer(text=text2, reply_markup=markup)
            return
        await state.update_data(computer_level=computer_level)
    if language == 'uzb':
        text = "üíµ Kutilayotgan ish haqi darajasini ko'rsating (so'm)"
        markup = expected_salary_default_keyboard_uzb
    else:
        text = "üíµ –£–∫–∞–∂–∏—Ç–µ –æ–∂–∏–¥–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã (—Å—É–º)"
        markup = expected_salary_default_keyboard_rus
    await message.answer(text=text, reply_markup=markup)
    await ResumeState.expected_salary.set()


@dp.message_handler(text=["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], state=ResumeState.source_about_vacancy)
@dp.message_handler(state=ResumeState.expected_salary)
async def get_expected_salary(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get('language')
    expected_salary = message.text
    if expected_salary not in ["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:
        if expected_salary in ["1 mln dan 2.5 mln gacha",
                               "–û—Ç 1 –º–ª –¥–æ 2.5 –º–ª", "2.5 mln dan 4 mln gacha",
                               "–û—Ç 2.5 –º–ª–Ω –¥–æ 4 –º–ª–Ω", "4 mln dan 5.5 mln gacha",
                               "–û—Ç 4 –º–ª–Ω –¥–æ 5.5 –º–ª–Ω", "5.5 mln va undan ko'p",
                               "5.5 –º–ª–Ω –∏ –±–æ–ª—å—à–µ"]:
            expected_salary = expected_salary
        else:
            text1 = "Noto'g'ri ma'lumot kiritildi" if language == 'uzb' else "–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
            text2 = "üíµ Kutilayotgan ish haqi darajasini ko'rsating (so'm)" if language == 'uzb' else "üíµ –£–∫–∞–∂–∏—Ç–µ –æ–∂–∏–¥–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã (—Å—É–º)"
            markup = expected_salary_default_keyboard_uzb if language == 'uzb' else expected_salary_default_keyboard_rus
            await message.answer(text=text1)
            await message.answer(text=text2, reply_markup=markup)
            return
        await state.update_data(expected_salary=expected_salary)
    if language == 'uzb':
        text = "ü§µ Suratingizni yuboring (telefoningizdan selfi olishingiz mumkin)"
        markup = back_or_main_default_keyboard_uzb
    else:
        text = "ü§µ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à–µ —Ñ–æ—Ç–æ (–º–æ–∂–Ω–æ —Å–µ–ª—Ñ–∏ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞)"
        markup = back_or_main_default_keyboard_rus
    await message.answer(text=text, reply_markup=markup)
    await ResumeState.photo.set()


@dp.message_handler(text=["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], state=ResumeState.agreement)
@dp.message_handler(state=ResumeState.photo, content_types=types.ContentType.PHOTO)
async def get_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get('language')

    photo = message.text
    if photo not in ["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:
        photo = message.photo[-1]
        file_id = photo.file_id
        await state.update_data(photo=file_id)
    if language == 'uzb':
        text = "‚ùì Vakansiya haqida qayerdan bildingiz?"
        markup = source_about_vacancy_default_keyboard_uzb
    else:
        text = "‚ùì –ö–∞–∫ –í—ã —É–∑–Ω–∞–ª–∏ –æ –≤–∞–∫–∞–Ω—Å–∏–∏?"
        markup = source_about_vacancy_default_keyboard_rus
    await message.answer(text=text, reply_markup=markup)
    await ResumeState.source_about_vacancy.set()


@dp.message_handler(state=ResumeState.photo)
async def get_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get('language')
    text1 = "Noto'g'ri ma'lumot kiritildi" if language == 'uzb' else "–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
    text2 = "ü§µ Suratingizni yuboring (telefoningizdan selfi olishingiz mumkin)" if language == 'uzb' else "ü§µ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à–µ —Ñ–æ—Ç–æ (–º–æ–∂–Ω–æ —Å–µ–ª—Ñ–∏ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞)"
    markup = back_or_main_default_keyboard_uzb if language == 'uzb' else back_or_main_default_keyboard_rus
    await message.answer(text=text1)
    await message.answer(text=text2, reply_markup=markup)


@dp.message_handler(text=["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], state=ResumeState.user)
@dp.message_handler(state=ResumeState.source_about_vacancy)
async def get_source_about_vacancy(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get('language')
    source_about_vacancy = message.text
    if source_about_vacancy not in ["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:
        if source_about_vacancy in ["Instagram", "OLX", "hh.uz", "Telegram kanal",
                                    "–¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª", "Do'stlar va tanishlar",
                                    "–î—Ä—É–∑—å—è-–∑–Ω–∞–∫–æ–º—ã–µ", "ISHBORUZ_Elon", "Mahalla fuqarolar yig'ini",
                                    "–°–æ–±—Ä–∞–Ω–∏–µ –≥—Ä–∞–∂–¥–∞–Ω –º–∞—Ö–∞–ª–ª–∏", "Xokimiyat",
                                    "Buyurtmalar berish shaxobchasidagi elon",
                                    "–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–æ–≤",
                                    "–ë–∏—Ä–∂–∞ —Ç—Ä—É–¥–∞ (Bandlik markazi)"]:
            source_about_vacancy = source_about_vacancy
        else:
            text1 = "Noto'g'ri ma'lumot kiritildi" if language == 'uzb' else "–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
            text2 = "‚ùì Vakansiya haqida qayerdan bildingiz?" if language == 'uzb' else "‚ùì –ö–∞–∫ –í—ã —É–∑–Ω–∞–ª–∏ –æ –≤–∞–∫–∞–Ω—Å–∏–∏?"
            markup = source_about_vacancy_default_keyboard_uzb if language == 'uzb' else source_about_vacancy_default_keyboard_rus
            await message.answer(text=text1)
            await message.answer(text=text2, reply_markup=markup)
            return
        await state.update_data(source_about_vacancy=source_about_vacancy)
    if language == 'uzb':
        text = "Ommaviy ofera bilan tanishib chiqing"

        markup = agreement_default_keyboard_uzb
    else:
        text = "–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –æ—Ñ–µ—Ä—Ç–æ–π"

        markup = agreement_default_keyboard_rus
    offer_url = "https://telegra.ph/Ishga-joylashishga-komaklashish-boyicha-xizmatlar-korsatish-uchun-oferta-01-14"
    await message.answer(
        f'<a href="{offer_url}" style="color:blue;"><b>{text}</b></a>',
        parse_mode=types.ParseMode.HTML, disable_web_page_preview=True, reply_markup=markup)
    await ResumeState.agreement.set()


@dp.message_handler(text=["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], state=ResumeState.created_at)
@dp.message_handler(state=ResumeState.agreement)
async def get_agreement(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get('language')
    agreement = message.text
    if agreement not in ["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:
        if agreement in ["‚úÖ Oferta shartlariga roziman", "‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω —Å –æ—Ñ–µ—Ä—Ç–æ–π"]:
            agreement = agreement
        else:
            text1 = "Noto'g'ri ma'lumot kiritildi" if language == 'uzb' else "–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
            text2 = "Ommaviy ofera bilan tanishib chiqing" if language == 'uzb' else "–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –æ—Ñ–µ—Ä—Ç–æ–π"
            markup = agreement_default_keyboard_uzb if language == 'uzb' else agreement_default_keyboard_rus
            await message.answer(text=text1)
            offer_url = "https://telegra.ph/Ishga-joylashishga-komaklashish-boyicha-xizmatlar-korsatish-uchun-oferta-01-14"
            await message.answer(
                f'<a href="{offer_url}" style="color:blue;"><b>{text2}</b></a>',
                parse_mode=types.ParseMode.HTML, disable_web_page_preview=True, reply_markup=markup)
            return
        await state.update_data(agreement=agreement)
    region_id = data.get('region')
    regions = await db.select_region(id=region_id)
    region = regions[0]
    category_id = data.get('category')
    categories = await db.select_category(id=category_id)
    category = categories[0]
    branch_id = data.get('branch')
    branches = await db.select_branch(id=branch_id)
    branch = branches[0]
    vacancy_id = data.get('vacancy')
    vacancies = await db.select_vacancy(id=vacancy_id)
    vacancy = vacancies[0]
    first_name = data.get('first_name')
    last_name = data.get('last_name')
    fathers_name = data.get('fathers_name')
    gender = data.get('gender')
    date_of_birth = data.get('date_of_birth')
    location = data.get('location')
    phone = data.get('phone')
    email = data.get('email')
    username = data.get('username')
    marital_status = data.get('marital_status')
    is_student = data.get('is_student')
    education_form = data.get('education_form')
    education_level = data.get('education_level')
    uzb_language_level = data.get('uzb_language_level')
    rus_language_level = data.get('rus_language_level')
    computer_level = data.get('computer_level')
    expected_salary = data.get('expected_salary')
    photo_id = data.get('photo')
    file_info = await bot.get_file(photo_id)
    source_about_vacancy = data.get('source_about_vacancy')

    text_uzb = (f"Viloyat: {region['name_uzb']}\n"
                f"Ish yo'nalishi: {category['title_uzb']}\n"
                f"üìçFilial: {branch['title_uzb']}\n"
                f"Vakansiya: {vacancy['title_uzb']}\n"
                f"Ism: {first_name}\n"
                f"Familiya: {last_name}\n"
                f"Otangiz ismi: {fathers_name}\n"
                f"üí¢Jins: {gender}\n"
                f"Tug'ilgan kun: {date_of_birth}\n"
                f"Turar joy manzili: {location}\n"
                f"Telefon: {phone}\n"
                f"üì•Elektron pochta: {email}\n"
                f"‚úèÔ∏èTelegramdagi username: {username}\n"
                f"üíçOilaviy ahvolingiz: {marital_status}\n"
                f"üë®‚ÄçüéìTalaba: {is_student}\n"
                f"üìöTa'lim shakli: {education_form}\n"
                f"üåêTa'lim darajasi: {education_level}\n"
                f"O'zbek tili darajasi: {uzb_language_level}\n"
                f"Rus tili darajasi: {rus_language_level}\n"
                f"üñ• Kompyuterni qanday darajada bilasiz: {computer_level}\n"
                f"üíµ Kutilayotgan ish haqi: {expected_salary}\n"
                f"ü§µ Surat: {file_info.file_unique_id}.jpg\n"
                f"‚ùì Vakansiya haqida qanday eshitdingiz?: {source_about_vacancy}\n"
                f"Ommaviy oferta bilan tanishib chiqing: {agreement}")

    text_rus = (f"–†–µ–≥–∏–æ–Ω: {region['name_rus']}\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {category['title_rus']}\n"
                f"üìç–§–∏–ª–∏–∞–ª: {branch['title_rus']}\n"
                f"–í–∞–∫–∞–Ω—Å–∏—è: {vacancy['title_rus']}\n"
                f"–ò–º—è: {first_name}\n"
                f"–§–∞–º–∏–ª–∏—è: {last_name}\n"
                f"–û—á–µ—Å—Ç–≤–æ: {fathers_name}\n"
                f"üí¢–ü–æ–ª: {gender}\n"
                f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {date_of_birth}\n"
                f"–ê–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ: {location}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                f"üì•–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: {email}\n"
                f"‚úèÔ∏èUsername –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ: {username}\n"
                f"üíç–í–∞—à–µ —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: {marital_status}\n"
                f"üë®‚ÄçüéìC—Ç—É–¥–µ–Ω—Ç: {is_student}\n"
                f"üìö–§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è: {education_form}\n"
                f"üåê–£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {education_level}\n"
                f"üá∫üáø–£—Ä–æ–≤–µ–Ω—å —É–∑–±–µ–∫—Å–∫–æ–≥–æ —è–∑—ã–∫–∞: {uzb_language_level}\n"
                f"üá∑üá∫–£—Ä–æ–≤–µ–Ω—å —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞: {rus_language_level}\n"
                f"üñ• –í–ª–∞–¥–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º: {computer_level}\n"
                f"üíµ –û–∂–∏–¥–∞–µ–º—ã–π –æ–∫–ª–∞–¥: {expected_salary}\n"
                f"ü§µ –§–æ—Ç–æ: {file_info.file_unique_id}.jpg\n"
                f"‚ùì –û—Ç–∫—É–¥–∞ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –≤–∞–∫–∞–Ω—Å–∏–∏?: {source_about_vacancy}\n"
                f"–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –æ—Ñ–µ—Ä—Ç–æ–π: {agreement}")
    text1 = text_uzb if language == 'uzb' else text_rus
    text2 = "Barcha ma'lumotlar to'g'ri to'ldirilganligini tasdiqlaysizmi?" if language == 'uzb' else "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ª–∏ –í—ã, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã?"
    markup = send_default_keyboard_uzb if language == 'uzb' else send_default_keyboard_rus

    await message.answer(text=text1)
    await message.answer(text=text2, reply_markup=markup)
    await ResumeState.user.set()


@dp.message_handler(state=ResumeState.user)
async def send_resume(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get('language')
    send = message.text
    if send in ["‚¨ÖÔ∏è Ortga", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:
        if language == 'uzb':
            text = "Ommaviy ofera bilan tanishib chiqing"
            markup = agreement_default_keyboard_uzb
        else:
            text = "–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –æ—Ñ–µ—Ä—Ç–æ–π"
            markup = agreement_default_keyboard_rus
        offer_url = "https://telegra.ph/Ishga-joylashishga-komaklashish-boyicha-xizmatlar-korsatish-uchun-oferta-01-14"
        await message.answer(
            f'<a href="{offer_url}" style="color:blue;"><b>{text}</b></a>',
            parse_mode=types.ParseMode.HTML, disable_web_page_preview=True, reply_markup=markup)
        await ResumeState.agreement.set()
        return
    elif send in ["‚¨ÜÔ∏è Yuborish", "‚¨ÜÔ∏è–û—Ç–ø—Ä–∞–≤–∏—Ç—å"]:
        region_id = data.get('region')
        category_id = data.get('category')
        branch_id = data.get('branch')
        vacancy_id = data.get('vacancy')
        first_name = data.get('first_name')
        last_name = data.get('last_name')
        fathers_name = data.get('fathers_name')
        gender = data.get('gender')
        if gender in ["üë© Ayol", "üë© –ñ–µ–Ω—â–∏–Ω–∞"]:
            gender = 'female'
        elif gender in ["üë® Erkak", "üë® –ú—É–∂—á–∏–Ω–∞"]:
            gender = 'male'
        date_of_birth = data.get('date_of_birth')
        date_of_birth = datetime.strptime(date_of_birth, '%d.%m.%Y')
        location = data.get('location')
        phone = data.get('phone')
        email = data.get('email')
        username = data.get('username')
        marital_status = data.get('marital_status')
        if marital_status in ["Uylangan/erga tekkan", "–ñ–µ–Ω–∞—Ç/–∑–∞–º—É–∂–µ–º"]:
            marital_status = 'Uylangan/erga tekkan'
        elif marital_status in ["Uylanmagan/erga tegmagan", "–ù–µ –∂–µ–Ω–∞—Ç/–Ω–µ –∑–∞–º—É–∂–µ–º"]:
            marital_status = 'Uylanmagan/erga tegmagan'
        elif marital_status in ["Ajrashgan", "–†–∞–∑–≤–µ–¥–µ–Ω/–†–∞–∑–≤–µ–¥–µ–Ω–∞"]:
            marital_status = 'Ajrashgan'
        elif marital_status in ["Beva", "–í–¥–æ–≤–µ—Ü/–í–¥–æ–≤–∞"]:
            marital_status = 'Beva'
        is_student = data.get('is_student')
        if is_student in ["Ha", "–î–∞"]:
            is_student = True
        elif is_student in ["Yo'q", "–ù–µ—Ç"]:
            is_student = False
        education_form = data.get('education_form')
        if education_form in ["Kunduzgi", "–û—á–Ω–æ–µ"]:
            education_form = 'Kunduzgi'
        elif education_form in ["Sirtqi", "–ó–∞–æ—á–Ω–æ–µ"]:
            education_form = 'Sirtqi'
        elif education_form in ["Kechki", "–í–µ—á–µ—Ä–Ω–µ–µ"]:
            education_form = 'Kechki'
        elif education_form in ["Masofaviy", "–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–µ"]:
            education_form = 'Masofaviy'
        education_level = data.get('education_level')
        if education_level in ["O'rta", "–°—Ä–µ–¥–Ω–µ–µ"]:
            education_level = "O'rta"
        elif education_level in ["O'rta maxsus", "–°—Ä–µ–¥–Ω–µ–µ-—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ"]:
            education_level = "O'rta maxsus"
        elif education_level in ["Oliy", "–í—ã—Å—à–µ–µ"]:
            education_level = "Oliy"
        uzb_language_level = data.get('uzb_language_level')
        if uzb_language_level in ["Past(tushunmayman va gapirmayman)",
                                  "–ù–∏–∑–∫–∏–π (–Ω–µ –ø–æ–Ω–∏–º–∞—é –∏ –Ω–µ –≥–æ–≤–æ—Ä—é)"]:
            uzb_language_level = "Past(tushunmayman va gapirmayman)"
        elif uzb_language_level in ["O'rta(tushunaman, lekin yomon gapiraman)",
                                    "–°—Ä–µ–¥–Ω–∏–π (–ø–æ–Ω–∏–º–∞—é, –Ω–æ –ø–ª–æ—Ö–æ –≥–æ–≤–æ—Ä—é)"]:
            uzb_language_level = "O'rta(tushunaman, lekin yomon gapiraman)"
        elif uzb_language_level in ["Ilg'or(men ravon gapiraman va tushunaman)",
                                    "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (—Å–≤–æ–±–æ–¥–Ω–æ –≥–æ–≤–æ—Ä—é –∏ –ø–æ–Ω–∏–º–∞—é)"]:
            uzb_language_level = "Ilg‚Äòor(men ravon gapiraman va tushunaman)"
        rus_language_level = data.get('rus_language_level')
        if rus_language_level in ["Past(tushunmayman va gapirmayman)",
                                  "–ù–∏–∑–∫–∏–π (–Ω–µ –ø–æ–Ω–∏–º–∞—é –∏ –Ω–µ –≥–æ–≤–æ—Ä—é)"]:
            rus_language_level = "Past(tushunmayman va gapirmayman)"
        elif rus_language_level in ["O'rta(tushunaman, lekin yomon gapiraman)",
                                    "–°—Ä–µ–¥–Ω–∏–π (–ø–æ–Ω–∏–º–∞—é, –Ω–æ –ø–ª–æ—Ö–æ –≥–æ–≤–æ—Ä—é)"]:
            rus_language_level = "O'rta(tushunaman, lekin yomon gapiraman)"
        elif rus_language_level in ["Ilg'or(men ravon gapiraman va tushunaman)",
                                    "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (—Å–≤–æ–±–æ–¥–Ω–æ –≥–æ–≤–æ—Ä—é –∏ –ø–æ–Ω–∏–º–∞—é)"]:
            rus_language_level = "Ilg'or(men ravon gapiraman va tushunaman)"
        computer_level = data.get('computer_level')
        if computer_level in ["Bilmayman",
                              "–ù–µ –≤–ª–∞–¥–µ—é"]:
            computer_level = "Bilmayman"
        elif computer_level in ["O'rtacha daraja",
                                "–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å"]:
            computer_level = "O'rtacha daraja"
        elif computer_level in ["Foydalanuvchi",
                                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"]:
            computer_level = "Foydalanuvchi"
        elif computer_level in ["Mutaxasis",
                                "–≠–∫—Å–ø–µ—Ä—Ç"]:
            computer_level = "Mutaxasis"
        expected_salary = data.get('expected_salary')
        if expected_salary in ["1 mln dan 2.5 mln gacha",
                               "–û—Ç 1 –º–ª –¥–æ 2.5 –º–ª"]:
            expected_salary = "1 mln dan 2.5 mln gacha"
        elif expected_salary in ["2.5 mln dan 4 mln gacha",
                                 "–û—Ç 2.5 –º–ª–Ω –¥–æ 4 –º–ª–Ω"]:
            expected_salary = "2.5 mln dan 4 mln gacha"
        elif expected_salary in ["4 mln dan 5.5 mln gacha",
                                 "–û—Ç 4 –º–ª–Ω –¥–æ 5.5 –º–ª–Ω"]:
            expected_salary = "4 mln dan 5.5 mln gacha"
        elif expected_salary in ["5.5 mln va undan ko'p",
                                 "5.5 –º–ª–Ω –∏ –±–æ–ª—å—à–µ"]:
            expected_salary = "5.5 mln va undan ko'p"

        photo_id = data.get('photo')

        file_info = await bot.get_file(photo_id)
        file_path = file_info.file_path
        file_name = os.path.join(PHOTO_DIR, f"{file_info.file_unique_id}.jpg")
        await bot.download_file(file_path, file_name)

        file_path = f'/photos/{file_info.file_unique_id}.jpg'
        source_about_vacancy = data.get('source_about_vacancy')
        if source_about_vacancy in ["Instagram"]:
            source_about_vacancy = "Instagram"
        elif source_about_vacancy in ["OLX"]:
            source_about_vacancy = "OLX"
        elif source_about_vacancy in ["hh.uz"]:
            source_about_vacancy = "hh.uz"
        elif source_about_vacancy in ["Telegram kanal",
                                      "–¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª"]:
            source_about_vacancy = "Telegram kanal"
        elif source_about_vacancy in ["Do'stlar va tanishlar",
                                      "–î—Ä—É–∑—å—è-–∑–Ω–∞–∫–æ–º—ã–µ"]:
            source_about_vacancy = "Do'stlar va tanishlar"
        elif source_about_vacancy in ["ISHBORUZ_Elon"]:
            source_about_vacancy = "ISHBORUZ_Elon"
        elif source_about_vacancy in ["Mahalla fuqarolar yig'ini",
                                      "–°–æ–±—Ä–∞–Ω–∏–µ –≥—Ä–∞–∂–¥–∞–Ω –º–∞—Ö–∞–ª–ª–∏"]:
            source_about_vacancy = "Mahalla fuqarolar yig'ini"
        elif source_about_vacancy in ["Xokimiyat"]:
            source_about_vacancy = "Xokimiyat"
        elif source_about_vacancy in ["Buyurtmalar berish shaxobchasidagi elon",
                                      "–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–æ–≤"]:
            source_about_vacancy = "Buyurtmalar berish shaxobchasidagi elon"
        elif source_about_vacancy in ["–ë–∏—Ä–∂–∞ —Ç—Ä—É–¥–∞ (Bandlik markazi)"]:
            source_about_vacancy = "–ë–∏—Ä–∂–∞ —Ç—Ä—É–¥–∞ (Bandlik markazi)"
        agreement = data.get('agreement')
        if agreement in ["‚úÖ Oferta shartlariga roziman", "‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω —Å –æ—Ñ–µ—Ä—Ç–æ–π"]:
            agreement = "‚úÖ Oferta shartlariga roziman"
        user_id = data.get('user_id')

        await db.create_resume(
            region_id=region_id,
            category_id=category_id,
            branch_id=branch_id,
            vacancy_id=vacancy_id,
            first_name=first_name,
            last_name=last_name,
            fathers_name=fathers_name,
            gender=gender,
            date_of_birth=date_of_birth,
            location=location,
            phone=phone,
            email=email,
            username=username,
            marital_status=marital_status,
            is_student=is_student,
            education_form=education_form,
            education_level=education_level,
            uzb_language_level=uzb_language_level,
            rus_language_level=rus_language_level,
            computer_level=computer_level,
            expected_salary=expected_salary,
            photo=file_path,
            source_about_vacancy=source_about_vacancy,
            user_id=user_id,
            agreement=agreement
        )
        text_uzb = ("Anketamizni to'ldirganingiz uchun tashakkur.\n"
                    "Biz sizning jamoamizga qo'shilish imkoniyatiga bo'lgan vaqtingiz va qiziqishingizni yuqori baholaymiz.\n"
                    "Sizning so'rovnomangiz muvaffaqiyatli qabul qilindi, siz ko'rib chiqish uchun nomzodlar ro'yxatiga kiritilgansiz.")
        text_rus = (
            "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã. –ú—ã –≤—ã—Å–æ–∫–æ —Ü–µ–Ω–∏–º –≤–∞—à–µ –≤—Ä–µ–º—è –∏ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ.\n"
            "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞, –≤—ã –≤–∫–ª—é—á–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.")
        text = text_uzb if language == 'uzb' else text_rus
        markup = main_menu_default_keyboard_uzb if language == 'uzb' else main_menu_default_keyboard_rus
        await message.answer(text=text, reply_markup=markup)
        await state.finish()

    else:
        text1 = "Noto'g'ri ma'lumot kiritildi" if language == 'uzb' else "–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        text2 = "Barcha ma'lumotlar to'g'ri to'ldirilganligini tasdiqlaysizmi?" if language == 'uzb' else "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ª–∏ –í—ã, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã?"
        markup = send_default_keyboard_uzb if language == 'uzb' else send_default_keyboard_rus
        await message.answer(text=text1)
        await message.answer(text=text2, reply_markup=markup)
        return
